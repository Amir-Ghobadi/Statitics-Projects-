caffeine_levels <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = n_students, Agrade = a_grades)
# Data
caffeine_levels <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
Caffeine2.df <- data.frame(caffeine = caffeine_levels, n = n_students, Agrade = a_grades)
# Data
caffeine_levels <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = n_students, Agrade = a_grades)
# Data
caffeine_levels <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = n_students, Agrade = a_grades)
# Data
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =Caffeine.df)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6),
main ="Proportion of A grades vs Caffeine", data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.gam=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
# Data
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =Caffeine.df)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6),
main ="Proportion of A grades vs Caffeine", data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
# Data
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6),
main ="Proportion of A grades vs Caffeine", data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
# Data
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
# Data
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
# Data
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeine_levels,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Data
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
# Create a data frame
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals
residuals_dev <- residuals(mod.quad, type = "deviance")
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals
residuals_dev <- residuals(mod.quad, type = "deviance")
print(residuals_dev)
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals
residuals_dev <- residuals(mod.quad, type = "deviance")
plor(residuals_dev)
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals
residuals_dev <- residuals(mod.quad, type = "deviance")
plot(residuals_dev)
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals
residuals_dev <- residuals(mod.quad, type = "deviance")
# Get fitted probabilities
fitted_probs <- fitted(mod.quad)
# Plot residuals against fitted probabilities
plot(fitted_probs, residuals_dev, xlab = "Fitted Probabilities", ylab = "Deviance Residuals",
main = "Residuals vs. Fitted Plot for Caffeine Levels")
abline(h = 0, col = "red", lty = 2)  # Add a horizontal line at zero
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals
residuals_dev <- residuals(mod.quad, type = "deviance")
# Plot residuals against caffeine levels
plot(caff_2$caffeine, residuals_dev, xlab = "Caffeine Levels (mg)", ylab = "Deviance Residuals",
main = "Residuals vs. Caffeine Levels")
abline(h = 0, col = "red", lty = 2)  # Add a horizontal line at zero
# Coefficients
beta <- coef(fit)
# Coefficients
beta <- coef(fit)
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals
residuals_dev <- residuals(mod.quad, type = "deviance")
# Plot residuals against caffeine levels
plot(caff_2$caffeine, residuals_dev, xlab = "Caffeine Levels (mg)", ylab = "Deviance Residuals",
main = "Residuals vs. Caffeine Levels")
abline(h = 0, col = "red", lty = 3)
caffeines <- c(0, 50, 100, 150, 200)  # Caffeine levels in mg
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students getting A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals
residuals_dev <- residuals(mod.quad, type = "deviance")
# Plot residuals against caffeine levels
plot(caff_2$caffeine, residuals_dev, xlab = "Caffeine Levels (mg)", ylab = "Deviance Residuals",
main = "Residuals vs. Caffeine Levels")
abline(h = 0, col = "red", lty = 1)
caffeines <- c(0, 50, 100, 150, 200)
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)      # Number of students gettin A grades
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals and plot them
residuals_dev <- residuals(mod.quad, type = "deviance")
plot(caff_2$caffeine, residuals_dev, xlab = "Caffeine Levels (mg)", ylab = "Deviance Residuals",
main = "Residuals vs. Caffeine Levels")
abline(h = 0, col = "red", lty = 1)
caffeines <- c(0, 50, 100, 150, 200)
students_n <- rep(300, 5)
a_grades <- c(109, 155, 175, 158, 103)
caff_2 <- data.frame(caffeine = caffeines,n = students_n, Agrade = a_grades)
mod.quad <- glm(cbind(Agrade,n-Agrade)~caffeine +I(caffeine^2),
family=binomial, data =caff_2)
summary(mod.quad)
p.quad=predict(mod.quad, newdata=new.df,type="response")
plot(I(Agrade/n)~caffeine, ylim=c(0,.6), data=caff_2)
caffs=seq(0, 500, by=1)
new.df=data.frame(caffeine=caffs)
p.quad=predict(mod.quad, newdata=new.df,type="response")
lines(caffs, p.quad, col="blue")
vcov(mod.quad)
# Calculate deviance residuals and plot them
residuals_dev <- residuals(mod.quad, type = "deviance")
plot(caff_2$caffeine, residuals_dev, xlab = "Caffeine Levels (mg)", ylab = "Deviance Residuals",
main = "Residuals vs. Caffeine Levels")
abline(h = 0, col = "red", lty = 1)
# Coefficients from your model output
beta1 <- -2.26622e-02
beta2 <- 2.28728e-07
# Calculate x_peak
x_peak <- -beta1 / (2 * beta2)
x_peak
# Variance-covariance matrix from your model output
vcov_beta <- matrix(c(1.27482e-02, -2.26622e-02, 8.28728e-07,
-2.26622e-02, 7.02769e-06, -3.23232e-08,
8.28728e-07, -3.23232e-08, 1.61865e-10), nrow=3, byrow=TRUE)
# Gradient matrix
delta_g <- matrix(c(0, -1 / (2 * beta2), beta1 / (2 * beta2^2)), nrow=1)
# Variance of x_peak
var_x_peak <- delta_g %*% vcov_beta %*% t(delta_g)
var_x_peak
# Standard error
se_x_peak <- sqrt(var_x_peak)
se_x_peak
# Define the coefficients
beta1 <- -2.26622e-04
beta2 <- 8.28728e-07
# Calculate x_peak
x_peak <- -beta1 / (2 * beta2)
# Define the gradient vector
delta_g <- c(0, -1 / (2 * beta2), beta1 / (2 * beta2^2))
# Assuming you have the variance-covariance matrix as var_beta
# var_beta <- matrix(c(...), nrow=3, ncol=3)  # this should be extracted from your model output
# var_x_peak <- t(delta_g) %*% var_beta %*% delta_g
# Print x_peak
print(x_peak)
# Assuming you've calculated var_x_peak
# se_x_peak <- sqrt(var_x_peak)
# print(se_x_peak)
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeines"]
beta_1 <- coefficients["caffeine"]
beta_1 <- coefficients["caffeine"]
# Assume mod.quad is the model
beta <- coef(mod.quad)
beta1 <- beta["caffeine"]
beta2 <- beta["I(caffeine^2)"]
x_peak <- -beta1 / (2 * beta2)
delta_g <- matrix(c(0, -1/(2*beta2), beta1/(2*beta2^2)), nrow = 3)
var_beta <- vcov(mod.quad)
var_x_peak <- t(delta_g) %*% var_beta %*% delta_g
se_x_peak <- sqrt(var_x_peak)
cat("Estimated x_peak:", x_peak, "\n")
cat("Variance of x_peak:", var_x_peak, "\n")
cat("Standard Error of x_peak:", se_x_peak, "\n")
# Assume mod.quad is the model
beta <- coef(mod.quad)
beta1 <- beta["caffeine"]
beta2 <- beta["I(caffeine^2)"]
x_peak <- -beta1 / (2 * beta2)
delta_g <- matrix(c(0, -1/(2*beta2), beta1/(2*beta2^2)), nrow = 3)
var_beta <- vcov(mod.quad)
var_x_peak <- t(delta_g) %*% var_beta %*% delta_g
se_x_peak <- sqrt(var_x_peak)
print(paste("Estimated x_peak:", x_peak))
print(paste("Variance of x_peak:", var_x_peak))
print(paste("Standard Error of x_peak:", se_x_peak))
# Assuming mod.quad is your model object from glm
beta <- coef(mod.quad)
beta1 <- beta["caffeine"]
beta2 <- beta["I(caffeine^2)"]
# Calculate Delta.g
Delta.g <- c(0, -1/(2 * beta2), beta1 / (2 * beta2^2))
# Print Delta.g
print(Delta.g)
# Assuming Delta.g and mod.quad are already defined
var_x_peak <- t(Delta.g) %*% vcov(mod.quad) %*% Delta.g
# Print the variance estimate
print(var_x_peak)
var_x_peak <- t(Delta.g) %*% vcov(mod.quad) %*% Delta.g
print(var_x_peak)
var_x_peak <- t(Delta.g) %*% vcov(mod.quad) %*% Delta.g
print(var_x_peak)
var_x_peak <- t(Delta.g) %*% vcov(mod.quad) %*% Delta.g
print(var_x_peak)
var_peak <- t(Delta.g) %*% vcov(mod.quad) %*% Delta.g
print(var_peak)
# Calculate standard error from the variance
standard_error <- sqrt(var_x_peak)
# Assume x_peak was previously calculated and stored
x_peak <- -beta1 / (2 * beta2)  # Assuming you have already calculated x_peak
# Calculate the 95% confidence interval
z_score <- 1.96  # Z-score for 95% confidence
ci_lower <- x_peak - z_score * standard_error
ci_upper <- x_peak + z_score * standard_error
# Print the confidence interval
print(paste("95% Confidence Interval for x_peak:", ci_lower, "to", ci_upper))
# Calculate standard error from the variance
standard_error <- sqrt(var_x_peak)
# Assume x_peak was previously calculated and stored
x_peak <- -beta1 / (2 * beta2)  # Assuming you have already calculated x_peak
# Calculate the 95% confidence interval
z_score <- 1.96  # Z-score for 95% confidence
ci_lower <- x_peak - z_score * standard_error
ci_upper <- x_peak + z_score * standard_error
# Print the confidence interval
print(paste("95% Confidence", ci_lower, "to", ci_upper))
# Calculate standard error from the variance
standard_error <- sqrt(var_x_peak)
# Assume x_peak was previously calculated and stored
x_peak <- -beta1 / (2 * beta2)  # Assuming you have already calculated x_peak
# Calculate the 95% confidence interval
z_score <- 1.96  # Z-score for 95% confidence
ci_lower <- x_peak - z_score * standard_error
ci_upper <- x_peak + z_score * standard_error
# Print the confidence interval
print(paste("95% Confidence", ci_lower, ci_upper))
# Calculate standard error from the variance
standard_error <- sqrt(var_x_peak)
# Assume x_peak was previously calculated and stored
x_peak <- -beta1 / (2 * beta2)  # Assuming you have already calculated x_peak
# Calculate the 95% confidence interval
z_score <- 1.96  # Z-score for 95% confidence
ci_lower <- x_peak - z_score * standard_error
ci_upper <- x_peak + z_score * standard_error
# Print the confidence interval
print(paste(ci_lower, ci_upper))
# Calculate standard error from the variance
standard_error <- sqrt(var_x_peak)
# Assume x_peak was previously calculated and stored
x_peak <- -beta1 / (2 * beta2)  # Assuming you have already calculated x_peak
# Calculate the 95% confidence interval
z_score <- 1.96  # Z-score for 95% confidence
ci_lower <- x_peak - z_score * standard_error
ci_upper <- x_peak + z_score * standard_error
# Print the confidence interval
print(paste(ci_lower, ci_upper))
# Calculate standard error from the variance
standard_error <- sqrt(var_x_peak)
# Assume x_peak was previously calculated and stored
x_peak <- -beta1 / (2 * beta2)  # Assuming you have already calculated x_peak
# Calculate the 95% confidence interval
z_vakue <- 1.96  # Z-score for 95% confidence
ci_lower <- x_peak - z_value * standard_error
# Calculate standard error from the variance
standard_error <- sqrt(var_x_peak)
# Assume x_peak was previously calculated and stored
x_peak <- -beta1 / (2 * beta2)  # Assuming you have already calculated x_peak
# Calculate the 95% confidence interval
z_value <- 1.96  # Z-score for 95% confidence
ci_lower <- x_peak - z_value * standard_error
ci_upper <- x_peak + z_value * standard_error
# Print the confidence interval
print(paste(ci_lower, ci_upper))
standard_error <- sqrt(var_x_peak)
x_peak <- -beta1 / (2 * beta2)
ci_lower <- x_peak - z_value * standard_error
ci_upper <- x_peak + z_value * standard_error
print(paste(ci_lower, ci_upper))
standard_error <- sqrt(var_x_peak)
ci_lower <- x_peak - z_value * standard_error
ci_upper <- x_peak + z_value * standard_error
print(paste(ci_lower, ci_upper))
print(standard_error)
ci_lower <- x_peak - z_value * standard_error
ci_upper <- x_peak + z_value * standard_error
print(paste(ci_lower, ci_upper))
# Assuming mod.quad is your logistic regression model
ns <- Caffeine2.df$n
# Assuming mod.quad is your logistic regression model
ns <- caff_2$n
xs <- caff_2$caffeine
# Generate predicted probabilities from the model
preds <- predict(mod.quad, newdata = data.frame(caffeine = xs), type = "response")
# Simulate random binomial observations based on these predictions
ys <- rbinom(length(ns), size = ns, prob = preds)
# View the simulated data
print(ys)
View(caff_2)
# Assuming mod.quad is your logistic regression model
ns <- caff_2$n
xs <- caff_2$caffeine
# Generate predicted probabilities from the model
preds <- predict(mod.quad, type = "response")
# Simulate random binomial observations based on these predictions
ys <- rbinom(length(ns), size = ns, prob = preds)
# View the simulated data
print(ys)
